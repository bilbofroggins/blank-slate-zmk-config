#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BT(n) BT_SEL n

/ {
    chosen { zmk,physical-layout = &layout_ortho_4x12_2x2u; };

    macros {
        Name: Name {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(P) &kp A &kp T &kp SPACE &kp LS(C) &kp U &kp N &kp N &kp I &kp F &kp F>;
            label = "NAME";
        };

        Email: Email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp J &kp C &kp F &kp I &kp F &kp A &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL";
        };

        VimSearch: VimSearch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp S &kp FSLH>;
            label = "VIMSEARCH";
        };

        QuoteSurround: QuoteSurround {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp S &kp FSLH &kp BSLH &kp BSLH &kp PRCNT &kp LS(V) &kp BSLH &kp BSLH &kp LPAR &kp DOT &kp STAR &kp BSLH &kp BSLH &kp RPAR &kp BSLH &kp BSLH &kp PRCNT &kp LS(V) &kp BSLH &kp BSLH &kp LPAR &kp DOT &kp BSLH &kp BSLH &kp RPAR &kp FSLH &kp BSLH &kp DQT &kp BSLH &kp BSLH &kp N1 &kp BSLH &kp BSLH &kp N2 &kp BSLH &kp DQT &kp FSLH>;
            label = "QUOTESURROUND";
        };
    };

    behaviors {
        CommaShift: CommaShift {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMASHIFT";
            bindings = <&kp COMMA>, <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        QuoteColon: QuoteColon {
            compatible = "zmk,behavior-mod-morph";
            label = "QUOTECOLON";
            bindings = <&kp SINGLE_QUOTE>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Capword {
            bindings = <&caps_word>;
            key-positions = <24 35>;
        };

        qq_layer_combo {
            timeout-ms = <200>;
            key-positions = <Q Q>;
            bindings = <&sl 5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&lt 2 TAB  &kp Q      &kp W     &kp E     &kp R  &kp T      &kp Y       &kp U  &kp I           &kp O            &kp P        &kp BSPC
&mo 1      &kp A      &kp S     &kp D     &kp F  &kp G      &kp H       &kp J  &kp K           &kp L            &QuoteColon  &kp RET
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V  &kp B      &kp N       &kp M  &CommaShift     &kp DOT          &kp FSLH     &kp RSHFT
&mo 7      &kp LCTRL  &kp LALT  &kp LGUI  &mo 3  &kp SPACE  &kp ESCAPE  &mo 4  &kp LEFT_ARROW  &kp RIGHT_ARROW  &trans       &trans
            >;
        };

        CapsLock {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans     &kp GRAVE     &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(PLUS)  &kp LS(DQT)    &trans
&trans  &trans  &trans  &trans  &trans  &trans     &kp LS(PIPE)  &kp LS(LPAR)  &kp LS(RPAR)  &kp EQUAL     &kp LS(COLON)  &kp LS(RETURN)
&trans  &trans  &trans  &trans  &trans  &kp LC(B)  &trans        &kp LBKT      &kp RBKT      &kp MINUS     &kp LS(UNDER)  &trans
&trans  &trans  &trans  &trans  &trans  &trans     &trans        &trans        &trans        &trans        &trans         &trans
            >;
        };

        Tab {
            bindings = <
&trans  &trans  &trans    &kp UP    &trans     &trans  &kp HOME  &kp LC(END)  &kp LC(HOME)  &kp END    &trans  &trans
&trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &kp LEFT  &kp DOWN     &kp UP        &kp RIGHT  &trans  &trans
&trans  &trans  &trans    &trans    &trans     &trans  &trans    &trans       &trans        &trans     &trans  &trans
&trans  &trans  &trans    &trans    &trans     &trans  &trans    &trans       &trans        &trans     &trans  &trans
            >;
        };

        Numpad {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0    &kp LA(BSPC)
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp N4  &kp N5  &kp N6  &kp SEMI  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp N1  &kp N2  &kp N3  &kp BSLH  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp N0  &trans  &trans  &trans  &trans    &trans
            >;
        };

        Fn {
            bindings = <
&trans  &trans  &kp F7  &kp F8  &kp F9  &trans  &trans  &trans  &kp K_MUTE    &kp C_VOL_DN      &kp C_VOLUME_UP     &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &trans  &trans  &trans  &kp C_REWIND  &kp C_PLAY_PAUSE  &kp C_FAST_FORWARD  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &trans  &trans  &trans  &trans        &trans            &trans              &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans        &trans            &trans              &trans
            >;
        };

        Macro {
            bindings = <
&trans  &trans  &trans  &Email  &VimSearch  &trans  &trans  &trans  &trans  &trans  &QuoteSurround  &trans
&trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans          &trans
&trans  &trans  &trans  &trans  &trans      &trans  &Name   &trans  &trans  &trans  &trans          &trans
&trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans          &trans
            >;
        };

        Double {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans      &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LS(LT)  &kp LS(GT)  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans      &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans      &trans  &trans  &trans
            >;
        };

        Corner {
            bindings = <
&bootloader  &trans     &trans     &trans     &trans  &trans  &trans  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans       &trans     &trans     &trans     &trans  &trans  &trans  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans       &trans     &trans     &trans     &trans  &trans  &trans  &trans        &trans        &trans        &trans        &trans
&trans       &mkp RCLK  &mkp LCLK  &kp LG(Z)  &trans  &trans  &trans  &trans        &trans        &trans        &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Double {
            if-layers = <1 3>;
            then-layer = <6>;
        };
    };
};
